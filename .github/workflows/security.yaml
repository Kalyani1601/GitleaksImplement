name: BuildDevSecOps

on:
  workflow_dispatch:
permissions:
  contents: read
  security-events: write

jobs:
  security-scans:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for full history scan
      # ✅  Secret Scanning
      - name: Run Gitleaks scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

     # ✅ Semgrep (SAST)
      - name: Install Semgrep
        run: pip install semgrep
      - name: Perform Semgrep Analysis
      #  run: semgrep scan -q --sarif --config auto ./ > semgrep-results.sarif
        run: semgrep scan -q --json --json-output=semgrep-results.json

      # upload the results for the CodeQL GitHub app to annotate the code
      - name: Save Semgrep results as artifact
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-scan-results
        #  path: semgrep-results.sarif
          path: semgrep-results.json
      
       # ✅ Code Linting
           #  ✅ Code Linting (For angular and nodejs app)
      - name: Run ESLint
        run: |
          npx eslint . -f json -o eslint-results.json || true

      - name: Upload ESLint results
        uses: actions/upload-artifact@v4
        with:
          name: eslint-report
          path: eslint-results.json

      # Install dependencies (for dep scanning)
      - name: Install Node.js dependencies
        run: npm install

      #  ✅ Snyk Dependency scanning (npm, yarn, etc.)
      - name: Snyk dependency scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: test --json-file-output=snyk-deps.json || true

      # Docker build for image scan
      - name: Build Docker image
        run: docker build -t myapp:latest .

      # Image scanning
      - name: Snyk container image scan
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: myapp:latest
          args: test --json-file-output=snyk-image.json || true

      # Upload both reports as artifacts
      - name: Upload Snyk Reports
        uses: actions/upload-artifact@v4
        with:
          name: snyk-security-reports
          path: |
            snyk-deps.json
            snyk-image.json



